// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prints a schema with the upload field plugin 1`] = `
"\\"\\"\\"All input for the create \`Post\` mutation.\\"\\"\\"
input CreatePostInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Post\` to be created by this mutation.\\"\\"\\"
  post: PostInput!
}

\\"\\"\\"The output of our create \`Post\` mutation.\\"\\"\\"
type CreatePostPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Post\` that was created by this mutation.\\"\\"\\"
  post: Post

  \\"\\"\\"An edge for our \`Post\`. May be used by Relay 1.\\"\\"\\"
  postEdge(
    \\"\\"\\"The method to use when ordering \`Post\`.\\"\\"\\"
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"A location in a connection that can be used for resuming pagination.\\"\\"\\"
scalar Cursor

\\"\\"\\"All input for the \`deletePostById\` mutation.\\"\\"\\"
input DeletePostByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!
}

\\"\\"\\"All input for the \`deletePost\` mutation.\\"\\"\\"
input DeletePostInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Post\` to be deleted.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our delete \`Post\` mutation.\\"\\"\\"
type DeletePostPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String
  deletedPostId: ID

  \\"\\"\\"The \`Post\` that was deleted by this mutation.\\"\\"\\"
  post: Post

  \\"\\"\\"An edge for our \`Post\`. May be used by Relay 1.\\"\\"\\"
  postEdge(
    \\"\\"\\"The method to use when ordering \`Post\`.\\"\\"\\"
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"
The root mutation type which contains root level fields which mutate data.
\\"\\"\\"
type Mutation {
  \\"\\"\\"Creates a single \`Post\`.\\"\\"\\"
  createPost(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: CreatePostInput!
  ): CreatePostPayload

  \\"\\"\\"Deletes a single \`Post\` using its globally unique id.\\"\\"\\"
  deletePost(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeletePostInput!
  ): DeletePostPayload

  \\"\\"\\"Deletes a single \`Post\` using a unique key.\\"\\"\\"
  deletePostById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeletePostByIdInput!
  ): DeletePostPayload

  \\"\\"\\"Updates a single \`Post\` using its globally unique id and a patch.\\"\\"\\"
  updatePost(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdatePostInput!
  ): UpdatePostPayload

  \\"\\"\\"Updates a single \`Post\` using a unique key and a patch.\\"\\"\\"
  updatePostById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdatePostByIdInput!
  ): UpdatePostPayload
}

\\"\\"\\"An object with a globally unique \`ID\`.\\"\\"\\"
interface Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: Cursor

  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: Cursor
}

type Post implements Node {
  body: String
  headerImageFile: String
  headline: String
  id: Int!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`Post\` object types. All fields are tested for equality and combined with a logical ‘and.’
\\"\\"\\"
input PostCondition {
  \\"\\"\\"Checks for equality with the object’s \`body\` field.\\"\\"\\"
  body: String

  \\"\\"\\"Checks for equality with the object’s \`headerImageFile\` field.\\"\\"\\"
  headerImageFile: String

  \\"\\"\\"Checks for equality with the object’s \`headline\` field.\\"\\"\\"
  headline: String

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int
}

\\"\\"\\"An input for mutations affecting \`Post\`\\"\\"\\"
input PostInput {
  body: String
  headerImageFile: Upload
  headline: String
  id: Int
}

\\"\\"\\"Represents an update to a \`Post\`. Fields that are set will be updated.\\"\\"\\"
input PostPatch {
  body: String
  headerImageFile: Upload
  headline: String
  id: Int
}

\\"\\"\\"A connection to a list of \`Post\` values.\\"\\"\\"
type PostsConnection {
  \\"\\"\\"
  A list of edges which contains the \`Post\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [PostsEdge!]!

  \\"\\"\\"A list of \`Post\` objects.\\"\\"\\"
  nodes: [Post]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`Post\` you could get from the connection.\\"\\"\\"
  totalCount: Int
}

\\"\\"\\"A \`Post\` edge in the connection.\\"\\"\\"
type PostsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`Post\` at the end of the edge.\\"\\"\\"
  node: Post
}

\\"\\"\\"Methods to use when ordering \`Post\`.\\"\\"\\"
enum PostsOrderBy {
  BODY_ASC
  BODY_DESC
  HEADER_IMAGE_FILE_ASC
  HEADER_IMAGE_FILE_DESC
  HEADLINE_ASC
  HEADLINE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"The root query type which gives access points into the data universe.\\"\\"\\"
type Query implements Node {
  \\"\\"\\"Reads and enables pagination through a set of \`Post\`.\\"\\"\\"
  allPosts(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: PostCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`Post\`.\\"\\"\\"
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsConnection

  \\"\\"\\"Fetches an object given its globally unique \`ID\`.\\"\\"\\"
  node(
    \\"\\"\\"The globally unique \`ID\`.\\"\\"\\"
    nodeId: ID!
  ): Node

  \\"\\"\\"
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"Reads a single \`Post\` using its globally unique \`ID\`.\\"\\"\\"
  post(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`Post\`.\\"\\"\\"
    nodeId: ID!
  ): Post
  postById(id: Int!): Post

  \\"\\"\\"
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  \\"\\"\\"
  query: Query!
}

\\"\\"\\"All input for the \`updatePostById\` mutation.\\"\\"\\"
input UpdatePostByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!

  \\"\\"\\"
  An object where the defined keys will be set on the \`Post\` being updated.
  \\"\\"\\"
  postPatch: PostPatch!
}

\\"\\"\\"All input for the \`updatePost\` mutation.\\"\\"\\"
input UpdatePostInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`Post\` to be updated.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"
  An object where the defined keys will be set on the \`Post\` being updated.
  \\"\\"\\"
  postPatch: PostPatch!
}

\\"\\"\\"The output of our update \`Post\` mutation.\\"\\"\\"
type UpdatePostPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`Post\` that was updated by this mutation.\\"\\"\\"
  post: Post

  \\"\\"\\"An edge for our \`Post\`. May be used by Relay 1.\\"\\"\\"
  postEdge(
    \\"\\"\\"The method to use when ordering \`Post\`.\\"\\"\\"
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"The \`Upload\` scalar type represents a file upload.\\"\\"\\"
scalar Upload
"
`;
